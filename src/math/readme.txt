数据结构和算法
计算机基础/c语言/离散数学-->数据结构-->操作系统,编译原理,数据库原理,软件工程
数据结构
	[数据逻辑结构(线性结构:表,栈,队列串,数组;非线性结构:树结构,图结构),
	数据存储结构(顺序结构,链式结构,索引结构,散列结构),
	数据运算(插入运算,修改运算,查找运算,排序运算)]
课程大纲:
	数据结构,算法,程序设计(概述)
	线性表
	栈和队列
	数组和广义表
	树和二叉树
	图
	查找
	内部排序
	外部排序
	文件
参考书:数据结构教程/数据结构(c语言)/数据结构/算法导论/算法与数据结构(c语言)
学习方法:演绎法(先学习然后解决问题)/归纳法(先解决问题归纳出理论知识)/策略(归纳和演绎交叉学习)/重点(实践积累)
学习路线:视频讲解-->下载课件-->阅读教材-->课程主页(博客:知识体系,实例程序,自测链接,实践项目,参考解答,学习方法指导)
http://edu.csdn.net/course/detail/1344/21076?auto_start=1
数据结构定义:
	基本概念:数据(计算机处理的符号),数据元素(个体,元素,节点,记录,基本单位),数据项(独立含义的最小数据单位),数据对象(若干个相同性质的若干个数据元素的集合)
数据结构:带结构的数据元素的集合
		相互之间存在着某种特定关系的数据元素的集合
		数据以及数据元素相互之间的联系
数据结构要素:
	数据逻辑结构:数据元素之间的逻辑关系,在用户面前呈现的形式
	数据存储结构/物理结构:数据元素及在计算机存储中的存储方式,也称为数据的物理结构
	数据运算:在该数据上的操作(curd)
------------------------------------------------------------
1.逻辑结构表示法:例如:表格--> <ai,ai+1>线性顺序
	a)线性结构(节点1对1);
	开始节点和终端节点都是唯一的
	除了开始节点和终端节点外,其余节点都是有且仅有一个前驱节点,有且仅有一个后继节点
	b)树形结构(节点1对多);
	开始节点唯一,终端节点不唯一
	除了终端节点外,每个几点有一个或多个后续节点
	除开始节点外,每个节点有且仅有一个前驱节点
	c)图形结构(节点多对多)
	没有开始节点和终端节点,所有节点都可能有多个前驱节点和多个后继节点
数据的逻辑结构层次关系
	线性结构
		一般线性表,
		受限线性表(栈,队列,串),
		线性表推广(数组,广义表)
	非线性结构
		集合,
		树形结构(一般树,二叉树),
		图状结构(有向图,无向图)
逻辑结构二元组表示方法
	逻辑结构的二元组表示:B=(D,R)
	B是一种数据结构,由数据元素的集合D和D上二元关系的集合R所组成
		D={Di | 1 <= i <= n,n >= 0},集合元素的集合(Di表示集合D中第i个节点或数据元素)
		R={Rj | 1 <= j <= m,m >= 0},D上二元关系的集合(Rj表示集合R中第j个关系,每个关系用 序偶 表示)
		注:序偶<x,y>(x,y属于D),x为y前驱元素,y为何x的后继元素,<x,y>表示有向,(x,y)表示无向


------------------------------------------------------------
2.存储/物理结构实现法:
	struct{int no;char name[8];...} stu[7]={{1,"张斌",...},{...}...};即:顺序存储<stu[i],stud[i+1],...>
	也可以typedef struct_student{int no,char name[8];..}StudType;链式存储方法(同一逻辑结构可以队形多种存储结构,设计存储结构,既存储元素,又存储关系)
4种常用存储结构类型:(顺序存储结构,链式存储结构,索引存储结构,散列存储结构)
-------------------------------------------------------------
3.运算实现:
	同样的运算在不同的存储结构中,其实现过程是不同的
	不同的存储结构,适用于不同的应用场合

-------------------------------------------------------------
抽象数据类型:
以数据为核心的思维,抽象思维
	数据类型:
		一个值的集合和定义在此集合上的一组操作的总称
		高级程序语言中,一般变量,常量,表达式,都明确的所属数据类型
		C语言:构造类型(数组,struct,union,enum),指针,void,基本类型(short,int...)
		不同类型的变量,其所能取的值和范围不同,所能进行的操作不同
	抽象数据类型(ADT:Abstract Data Type) = 逻辑结构 + 抽象运算
		抽象数据类型暂时不考虑计算机具体存储结构和运算的具体实现
		抽象数据类型实质上,就是在描述问题本身(与计算机无关)
		不涉及具体和计算机系统相关的细节情况下,优先理解问题本身,在此基础上,事项用计算机求解问题的过程
	ADT<抽象数据类型名>{
		数据对象:<数据对象的定义>
		数据关系:<数据关系的定义>
		基本操作:<基本操作的定义>
	}

算法和描述
设计-->实现(数据表示,功能实现)
数据元素之间的逻辑关系==>逻辑结构上的操作功能
数据元素之间的物理关系==>具体存储结构上的操作实现
	1:算法是在具体存储结构上,具体某个抽象运算
	2:算法是对特定问题求解方法(步骤)的一种描述,是指令的有限序列,器中每条指令表示一个或多个操作
算法的重要特征:
	1.有穷性:在有穷步之后接受
	2.确定性:无二义性
	3.可行性:可通过基本运算有限次执行来实现
	4.有输入,有输出
算法和程序关系:
	一个计算机程序是对一个算法使用某中程序设计语言的具体实现
	算法必须可终止,意味着不是所有的计算机程序都是算法
好算法:
	正确性:算法应满足具体问题的需求
	可读性:算法容易供人阅读和交流,可读性好的算法有助于对算法的理解和修改(难以程度)
	健壮性:算法具有容错处理,当非法/错误数据时,算法能做出反应处理,不至于产生莫名其妙的结果
	通用性:算法应具有一般性,即算法的处理结果对于一般的数据集合都成立
	效率和存储量需求:效率指的是算法执行时间,存储两需求指算法执行过程中所需要的最大存储空间,一般与问题规模有关
算法描述:
	自然语言,伪代码,传统流程图,N-S结构化流程图,程序设计语言
-------------------------------------------------------
关注效率
算法的效率:有效地使用计算资源满足需求
	时:用时短(cpu计算资源)
	空:耗费内存少(存储资源)

用基本运算的次数 度量 算法的时间复杂度!
算法构成:
	一个算法是由控制结构(顺序,分支和循环)和原操作(固有数据类型的操作,如比较,加减乘除等)构成的
	算法时间取决于两者的综合效果
	算法执行时间大致为基本运算所需时间与其运算次数的乘积
	
算法的时间复杂度:
原理:在一个算法中,进行基本运算次数越少,其运算时间就相对越少
定义:算法中包含基本运算次数的多少成为算法的时间复杂度
度量:算法中基本运算次数T(n)是 问题规模n 的某个函数f(n),记为:T(n)=O(f(n))
	大O:表示时间复杂度的"量级"
		随着问题规模n的增大,算法执行时间的增长率和f(n)的增长率相同
	"O"的形式定义:
		若f(n)是正整数n的一个函数;
		存在一个正整数C和n0,使得当n>=n0时,
		有T(n) <= C*f(n);则记T(n)=O(f(n));类似与高数的极限,最终量级
复杂度的量级:
	O(1)常量级 < O(log.2 n)或O(lgn)对数级如:二分查找 < O(n)线性级 < O(nlog.2 n)即O(n*lgn)线性对数级 < O(n*n)平方级 < O(.2 n)指数级 < O(n!)
三种复杂度:最佳情况复杂度,平均复杂度,最坏情况复杂度

程序 = 数据结构 + 算法
将松散无组织的数据,按某种要求组成一种数据结构,对设计一个简明高效可靠的程序是大有益处的.程序设计语言提供了实现数据结构和算法的机制,程序设计在数据结构和算法设计工作的基础上完成
算法是程序的核心,算法在程序设计,软件开发,甚至可以说整个计算机科学中的地位都是及其重要的

算法和数据结构
求解的问题可以通过抽象数据类型描述,它由数据的逻辑结构和抽象运算两部分组成
抽象数据类型 = 数据的逻辑结构 + 抽象运算(运算的功能描述)
数据逻辑结构可以映射成多种存储结构(如顺序,链式,索引,散列)
抽象运算在不同的存储结构上实现可以对应多种算法,在同一种存储结构上实现也可能有多种算法
通过算法的时间复杂度,空间复杂度等分析,可以得到好的算法
数据逻辑结构-->数据存储结构-->算法-->算法分析

同一问题多种设计(如:班级学生课程成绩表设计为学生表和成绩表两个维度)
存储结构的存储能力
	如果存储结构的存储能力强,存储信息多,算法将较好设计
	过于不当的存储结构,可能对于比较复杂的算法
	工程中,要处理好时间空间的矛盾
存储结构应与所选算法相适应
	存储结构是实现算法的基础,也会影响算法的设计
	选择数据结构时要充分考虑算法的各种操作,应与算法的操作向适应








	

