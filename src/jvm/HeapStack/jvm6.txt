G1收集器 (Garbage First)
	G1收集器的目标是作为一款服务器的垃圾收集器，它在吞吐量和停顿控制上，预期要优于CMS收集器,特点:
		紧凑的空闲空间,且没有很长的GC停顿时间
		
		与 CMS 收集器相比，G1 收集器是基于标记-压缩算法的。
			因此，它不会产生空间碎片，也没有必要在收集完成后，进行一次独占式的碎片整理工作。
		G1 收集器还可以进行非常精确的停顿控制。
			它可以让开发人员指定当停顿时长为 M 时，垃圾回收时间不超过 N。
	
	G1收集器可以实现在基本不牺牲吞吐量的前提下完成低停顿的内存回收.
	这是由于它能够极力避免全区域的垃圾收集:
		G1启动后不需要请求更大的Java堆,
		而G1将整个Java堆（包括新生代、老年代）划分为多个大小固定的独立区域(Region),
		并且跟踪这些区域里的垃圾堆积程度，在后台维护一个优先列表，每次根据允许的收集时间，优先回收垃圾最多的区域。
			
			这里,每个区域大小相等，在1M~32M之间。
			JVM最多支持2000个区域，可推算G1能支持的最大内存为2000*32M=62.5G。
			区域(region)的大小在JVM初始化的时候决定，也可以用-XX:G1HeapReginSize设置。
			在G1中没有物理上的Yong(Eden/Survivor)/Old Generation，
			它们是逻辑的，使用一些非连续的区域(Region)组成的。
	G1新生代GC
		当新生代占用达到一定比例的时候，开始触发Young GC。GC后
		存活的对象被转移(copied or moved)到一个或者多个区域空闲(survivor regions)中，
		这些被填充的区域将是新的新生代，当新生代对象的年龄已经达到阈值，被提升到老年代的区域中(promoted to old generation regions)。
		会有一次STW(Stop The World)，GC后根据Young GC的统计信息调整Eden和Survive的大小,给下一次年轻代GC使用
		有助于合理利用内存，提高回收效率。其中清单统计信息(Accounting)保存了用来辅助计算size,诸如暂停时间目标之类的东西也会纳入考虑.
		回收的过程是多个回收线程并发收集。
		再次GC,存活的对象被拷贝到新的 survivor区或者老年代.
	G1老年代GC
		和CMS类似，G1收集器收集老年代对象会有短暂停顿。
		1,标记阶段(Initial-Mark)
			这个阶段会有STW，这附加在(piggybacked on)一次正常的年轻代GC
 			标记可能有引用指向老年代对象的survivor区(根regions).
			存活对象的初始标记被固定在年轻代垃圾收集里面.
		2,扫描根区域(Root Region Scanning)
			扫描 survivor 区中引用到老年代的引用. 
			这个阶段应用程序的线程会继续运行. 在年轻代GC可能发生之前此阶段必须完成.
		3,并发标记(Concurrent Marking)
			整个堆中并发进行查找和标记活着的对象;
			如果找到空的区域(如用红叉“X”标示的区域), 则会在 Remark阶段立即移除;
			当然,清单(accounting)信息决定了活跃度(liveness)的计算.
				活跃度(liveness)信息标识出哪些区域在转移暂停期间最适合回收
			此阶段可以被年轻代GC打断(interrupted).
		4,再次标记(Remark)
			短暂的STW，再标记阶段是用来收集并发标记阶段产生新的垃圾。
			使用一个叫做 snapshot-at-the-beginning(SATB, 起始快照)的算法,该算法比CMS所使用的算法要快速的多.
			空的区域被移除并回收。
			现在计算所有区域的活跃度(Region liveness)
		5,清理(Copy/Clean up)
			Clean up会有STW,多线程清除失活对象
				在存活对象和完全空闲的区域上执行统计(accounting);
				擦写 Remembered Sets;
				重置空heap区,并将他们返还给空闲列表(free list),这里是Concurrent并发多线程操作
			Copy也将STW,年轻代与老年代同时进行回收
				转移或拷贝存活的对象到新的未使用的heap区(new unused regions);
					只在年轻代发生时日志会记录为 [GC pause (young)];
					如果在年轻代和老年代一起执行则会被日志记录为 [GC Pause (mixed)]
			G1选择活跃度(liveness)最低的区域,这些区域可以最快的完成回收;
				然后这些区域和年轻代GC在同时被垃圾收集,在日志被标识为 [GC pause (mixed)],
				所以年轻代和老年代都在同一时间被垃圾收集.
	其中Remember Sets：
		G1收集器中，Region之间的对象引用以及其他收集器中的新生代和老年代之间的对象引用是使用Remember Sets来避免扫描全堆。
	
	使用参数
		-XX:+UnlockExperimentalVMOptions –XX:+UseG1GC 来启用 G1 回收器
		-XX:MaxGCPauseMills=20,-XX:GCPauseIntervalMills=200 设置 G1 回收器的目标停顿时间
	G1参考:http://blog.csdn.net/renfufei/article/details/41897113