TCP/IP是什么？

  TCP/IP是个协议组，可分为三个层次：网络层、传输层和应用层。
    在网络层有IP协议、ICMP协议、ARP协议、RARP协议和BOOTP协议。
    在传输层中有TCP协议与UDP协议。
    在应用层有FTP、HTTP、TELNET、SMTP、DNS等协议。


Socket是什么呢？

    Socket是应用层与TCP/IP协议族通信的中间软件抽象层，一组接口，把复杂的TCP/IP协议族隐藏在Socket接口后面。
  	 所以HTTP就是TCP/IP应用层的协议。Socket是他们的软件抽象层。

短连接：
    连接->传输数据->关闭连接
    HTTP是无状态的，浏览器和服务器每进行一次HTTP操作，就建立一次连接，但任务结束就中断连接。
    也可以这样说：短连接是指SOCKET连接后发送后接收完数据后马上断开连接。
长连接：
     连接->传输数据->保持连接 -> 传输数据-> 。。。 ->关闭连接。
    长连接指建立SOCKET连接后不管是否使用都保持连接，但安全性较差。
http的长连接：
    HTTP也可以建立长连接的，使用Connection:keep-alive，HTTP 1.1默认进行持久连接。HTTP1.1和HTTP1.0相比较而言，最大的区别就是增加了持久连接支持(貌
 似最新的 http1.0 可以显示的指定 keep-alive),但还是无状态的，或者说是不可以信任的。



参考资料：

http://blog.csdn.net/xijiaohuangcao/article/details/6105623——《写给那些让我糊里糊涂的HTTP、TCP、UDP、Socket》
http://hi.baidu.com/loleafver/blog/item/a222c9d853d4f1e638012fa0.html——《http长连接和短连接》
http://hi.baidu.com/einsof/blog/item/f2f3a84b5d1a30fb82025ca0.html——《什么是短连接、长连接、Socket》

================================================

socket

Socket协议的形象描述
	socket的英文原义是“孔”或“插座”。在这里作为4BDS UNIX的进程通信机制，取后一种意思。
 	socket非常类似于电话插座。以一个国家级电话网为例。电话的通话双方相当于相互通信的2个进程，区号是它的网络地址；
 	区内一个单位的交换机相当于一台主机，主机分配给每个用户的局内号码相当于socket号。
 	任何用户在通话之前，首先要占有一部电话机，相当于申请一个socket；
 	同时要知道对方的号码，相当于对方有一个固定的socket。
 	然后向对方拨号呼叫，相当于发出连接请求(假如对方不在同一区内，还要拨对方区号，相当于给出网络地址)。
 	对方假如在场并空闲(相当于通信的另一主机开机且可以接受连接请求)，拿起电话话筒，双方就可以正式通话，相当于连接成功。
 	双方通话的过程，是一方向电话机发出信号和对方从电话机接收信号的过程，相当于向socket发送数据和从socket接收数据。
 	通话结束后，一方挂起电话机相当于关闭socket，撤消连接。
 详细内容见百科。


 通常短连接是这样：连接->传输数据->关闭连接
 
 那什么是长连接？
 	一般长连接相对短连接而言的，长连接在传输完数后不关闭连接，
 	而不断的发送包保持连接等待处理下一个数据包。
	such as: 连接->传输数据->保持连接 -> 传输数据-> 。。。 ->关闭连接。

 那什么时候用短连接呢？
 	一般长连接用于少数client-end   to server-end的频繁的通信，例如：
 	
 	数据库的连接用长连接， 如果用短连接频繁的通信会造成socket错误，而且频繁的socket 创建也是对资源的浪费。
	而像WEB网站的http服务一般都用短链接，因为长连接对于服务端来说会耗费一定的资源，
	而像WEB网站这么频繁的成千上万甚至上亿客户端的连接用短连接会更省一些资源。(查看来源)


TCP/IP通信解读长短链接
 一。通信方式
 主要有以下三大类:
	 (一)SERVER/CLIENT方式
	 1.一个Client方连接一个Server方，或称点对点(peer to peer)：
	 2.多个Client方连接一个Server方，这也是通常的并发服务器方式。
	 3.一个Client方连接多个Server方，这种方式很少见，主要
	 用于一个客户向多个服务器发送请求情况。
	
	 (二)连接方式
	 1.长连接
	 Client方与Server方先建立通讯连接，连接建立后不断开，
	 然后再进行报文发送和接收。这种方式下由于通讯连接一直
	 存在，可以用下面命令查看连接是否建立：
	 netstat –f inet|grep 端口号(如5678)。
	 此种方式常用于点对点通讯。
	
	 2.短连接
	 Client方与Server每进行一次报文收发交易时才进行通讯连
	 接，交易完毕后立即断开连接。此种方式常用于一点对多点
	 通讯，比如多个Client连接一个Server.
	
	 (三)发送接收方式
	 1.异步
	 报文发送和接收是分开的，相互独立的，互不影响。这种方
	 式又分两种情况：
	 (1)异步双工：接收和发送在同一个程序中，有两个不同的
	 子进程分别负责发送和接收
	 (2)异步单工：接收和发送是用两个不同的程序来完成。
	 2.同步
	 报文发送和接收是同步进行，既报文发送后等待接收返回报文。
	 同步方式一般需要考虑超时问题，即报文发上去后不能无限等
	 待，需要设定超时时间，超过该时间发送方不再等待读返回报
	 文，直接通知超时返回。

 实际通信方式是这三类通信方式的组合。比如一般书上提供的
 TCP/IP范例程序大都是同步短连接的SERVER/CLIENT程序。有的
 组合是基本不用的，比较常用的有价值的组合是以下几种：

	 同步短连接Server/Client
	 同步长连接Server/Client
	 异步短连接Server/Client
	 异步长连接双工Server/Client
	 异步长连接单工Server/Client

 其中异步长连接双工是最为复杂的一种通信方式，有时候经
 常会出现在不同银行或不同城市之间的两套系统之间的通信。
 比如金卡工程。由于这几种通信方式比较固定，所以可以预
 先编制这几种通信方式的模板程序。

 二.报文格式
 通信报文格式多样性更多，相应地就必须设计对应的读写报文的接
 收和发送报文函数。

 (一)阻塞与非阻塞方式　
 1.非阻塞方式
	 读函数不停地进行读动作，如果没有报文接收到，等待一段时间后
	 超时返回，这种情况一般需要指定超时时间。
 2.阻塞方式
	如果没有报文接收到，则读函数一直处于等待状态，直到有报文到达。

 (二)循环读写方式
 1.一次直接读写报文
	 在一次接收或发送报文动作中一次性不加分别地全部读取或全部
	 发送报文字节。
 2.不指定长度循环读写
	 这一般发生在短连接进程中，受网络路由等限制，一次较长的报
	 文可能在网络传输过程中被分解成了好几个包。一次读取可能不
	 能全部读完一次报文，这就需要循环读报文，直到读完为止。

 3.带长度报文头循环读写
	 这种情况一般是在长连接进程中，由于在长连接中没有条件能够
	 判断循环读写什么时候结束，所以必须要加长度报文头。读函数
	 先是读取报文头的长度，再根据这个长度去读报文.实际情况中，
	 报头的码制格式还经常不一样，如果是非ASCII码的报文头，还必须
 转换成ASCII,常见的报文头码制有：
	 (1)n个字节的ASCII码
	 (2)n个字节的BCD码
	 (3)n个字节的网络整型码 

http://blog.csdn.net/baple/article/details/10202623









