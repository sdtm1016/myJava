java5 Condition用法--实现线程间的通信
	Condition的功能类似在传统线程技术中的Object.wait()和Object.natify()的功能，
	传统线程技术实现的互斥只能一个线程单独干，不能说这个线程干完了通知另一个线程来干，
	Condition就是解决这个问题的，实现线程间的通信。比如CPU让小弟做事，小弟说我先歇着并通知大哥，大哥就开始做事。

	Condition 将 Object 监视器方法（wait、notify 和 notifyAll）分解成截然不同的对象，
	以便通过将这些对象与任意 Lock 实现组合使用，为每个对象提供多个等待 set（wait-set）。
	其中，Lock 替代了 synchronized 方法和语句的使用，Condition 替代了 Object 监视器方法的使用。

	Condition实例实质上被绑定到一个锁上。要为特定 Lock 实例获得 Condition 实例，请使用其 newCondition() 方法。
	在java5中，一个锁可以有多个条件，每个条件上可以有多个线程等待，通过调用await()方法，可以让线程在该条件下等待。
	当调用signalAll()方法，又可以唤醒该条件下的等待的线程。

下面以银行存取款案例阐述Condition用法：
	假设有一个账户，多个用户（线程）在同时操作这个账户，有的存款有的取款，存款随便存，取款有限制，不能透支，
	任何试图透支的操作都将等待里面有足够存款才执行操作。