Java多线程-新特征-原子量

所谓的原子量即操作变量的操作是“原子的”，该操作不可再分，因此是线程安全的。

为何要使用原子变量呢，原因是多个线程对单个变量操作也会引起一些问题。
在Java5之前，可以通过volatile、synchronized关键字来解决并发访问的安全问题，但这样太麻烦。
Java5之后，专门提供了用来进行单变量多线程并发安全访问的工具包java.util.concurrent.atomic，其中的类也很简单。
	See: AtomicRunnable.java
	多线程-原子量 ThreadAtomicTest.java
从运行结果可以看出，虽然使用了原子量，但是程序并发访问还是有问题，那究竟问题出在哪里了？
这里要注意的一点是，原子量虽然可以保证单个变量在某一个操作过程的安全，但无法保证你整个代码块，或者整个程序的安全性。
因此，通常还应该使用锁等同步机制来控制整个程序的安全性。
下面是对这个错误修正：
	See:AtomicRunnable2.java
	多线程-原子量 ThreadAtomicTest2.java
这里使用了一个对象锁，来控制对并发代码的访问。
不管运行多少次，执行次序如何，最终余额均为21000，这个结果是正确的。
有关原子量的用法很简单，关键是对原子量的认识，原子仅仅是保证变量操作的原子性，但整个程序还需要考虑线程安全的。